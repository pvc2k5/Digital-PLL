Yosys 0.57+72 (git sha1 fa02d71f6, x86_64-conda-linux-gnu-c++ 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/home/runner/work/conda-opensource-eda/conda-opensource-eda/workdir/conda-env/conda-bld/yosys_1757723646908/work=/usr/local/src/conda/yosys-0.57_73_gfa02d71f6 -fdebug-prefix-map=/home/pvc/eda-env/envs/py312=/usr/local/src/conda-prefix -fPIC -O3)
Using ABC area script.
Extracting clock period from SDC file: ./results/gf180/pll/base/clock_period.txt
Setting clock period to 100
1. Executing RTLIL frontend.
2. Executing HIERARCHY pass (managing design hierarchy).
2.1. Analyzing design hierarchy..
2.2. Analyzing design hierarchy..
3. Executing SYNTH pass.
3.1. Executing HIERARCHY pass (managing design hierarchy).
3.1.1. Analyzing design hierarchy..
3.1.2. Analyzing design hierarchy..
3.2. Executing PROC pass (convert processes to netlists).
3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
3.2.4. Executing PROC_INIT pass (extract init attributes).
3.2.5. Executing PROC_ARST pass (detect async resets in processes).
3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).
3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
3.2.12. Executing OPT_EXPR pass (perform const folding).
3.3. Executing OPT_EXPR pass (perform const folding).
3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
3.5. Executing CHECK pass (checking for obvious problems).
3.6. Executing OPT pass (performing simple optimizations).
3.6.1. Executing OPT_EXPR pass (perform const folding).
3.6.2. Executing OPT_MERGE pass (detect identical cells).
3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
3.6.5. Executing OPT_MERGE pass (detect identical cells).
3.6.6. Executing OPT_DFF pass (perform DFF optimizations).
3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
3.6.8. Executing OPT_EXPR pass (perform const folding).
3.6.9. Finished fast OPT passes. (There is nothing left to do.)
3.7. Executing FSM pass (extract and optimize FSM).
3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).
3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).
3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).
3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).
3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
3.8. Executing OPT pass (performing simple optimizations).
3.8.1. Executing OPT_EXPR pass (perform const folding).
3.8.2. Executing OPT_MERGE pass (detect identical cells).
3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
3.8.5. Executing OPT_MERGE pass (detect identical cells).
3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
3.8.8. Executing OPT_EXPR pass (perform const folding).
3.8.9. Finished fast OPT passes. (There is nothing left to do.)
3.9. Executing WREDUCE pass (reducing word size of cells).
3.10. Executing PEEPOPT pass (run peephole optimizers).
3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
3.12. Executing ALUMACC pass (create $alu and $macc cells).
3.13. Executing SHARE pass (SAT-based resource sharing).
3.14. Executing OPT pass (performing simple optimizations).
3.14.1. Executing OPT_EXPR pass (perform const folding).
3.14.2. Executing OPT_MERGE pass (detect identical cells).
3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
3.14.5. Executing OPT_MERGE pass (detect identical cells).
3.14.6. Executing OPT_DFF pass (perform DFF optimizations).
3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
3.14.8. Executing OPT_EXPR pass (perform const folding).
3.14.9. Finished fast OPT passes. (There is nothing left to do.)
3.15. Executing MEMORY pass.
3.15.1. Executing OPT_MEM pass (optimize memories).
3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).
3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).
3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Keep modules above estimated size of
      0 gate equivalents
4. Executing CELLMATCH pass. (match cells)
Warning: Ignoring blackbox module digital_pll_controller.
Warning: Ignoring blackbox module gf180mcu_fd_sc_mcu7t5v0__icgtn_1.
Warning: Ignoring blackbox module gf180mcu_fd_sc_mcu7t5v0__icgtn_2.
Warning: Ignoring blackbox module gf180mcu_fd_sc_mcu7t5v0__icgtn_4.
Warning: Ignoring blackbox module gf180mcu_fd_sc_mcu7t5v0__icgtp_1.
Warning: Ignoring blackbox module gf180mcu_fd_sc_mcu7t5v0__icgtp_2.
Warning: Ignoring blackbox module gf180mcu_fd_sc_mcu7t5v0__icgtp_4.
Warning: Ignoring blackbox module ring_osc2x13.
5. Executing KEEP_HIERARCHY pass.
6. Executing SYNTH pass.
6.1. Executing PROC pass (convert processes to netlists).
6.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
6.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
6.1.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
6.1.4. Executing PROC_INIT pass (extract init attributes).
6.1.5. Executing PROC_ARST pass (detect async resets in processes).
6.1.6. Executing PROC_ROM pass (convert switches to ROMs).
6.1.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
6.1.8. Executing PROC_DLATCH pass (convert process syncs to latches).
6.1.9. Executing PROC_DFF pass (convert process syncs to FFs).
6.1.10. Executing PROC_MEMWR pass (convert process memory writes to cells).
6.1.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
6.1.12. Executing OPT_EXPR pass (perform const folding).
6.2. Executing FLATTEN pass (flatten design).
6.3. Executing OPT_EXPR pass (perform const folding).
6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
6.5. Executing CHECK pass (checking for obvious problems).
6.6. Executing OPT pass (performing simple optimizations).
6.6.1. Executing OPT_EXPR pass (perform const folding).
6.6.2. Executing OPT_MERGE pass (detect identical cells).
6.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.6.5. Executing OPT_MERGE pass (detect identical cells).
6.6.6. Executing OPT_DFF pass (perform DFF optimizations).
6.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
6.6.8. Executing OPT_EXPR pass (perform const folding).
6.6.9. Finished fast OPT passes. (There is nothing left to do.)
6.7. Executing FSM pass (extract and optimize FSM).
6.7.1. Executing FSM_DETECT pass (finding FSMs in design).
6.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).
6.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).
6.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
6.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).
6.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
6.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).
6.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
6.8. Executing OPT pass (performing simple optimizations).
6.8.1. Executing OPT_EXPR pass (perform const folding).
6.8.2. Executing OPT_MERGE pass (detect identical cells).
6.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.8.5. Executing OPT_MERGE pass (detect identical cells).
6.8.6. Executing OPT_DFF pass (perform DFF optimizations).
6.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
6.8.8. Executing OPT_EXPR pass (perform const folding).
6.8.9. Finished fast OPT passes. (There is nothing left to do.)
6.9. Executing WREDUCE pass (reducing word size of cells).
6.10. Executing PEEPOPT pass (run peephole optimizers).
6.11. Executing OPT_CLEAN pass (remove unused cells and wires).
6.12. Executing ALUMACC pass (create $alu and $macc cells).
6.13. Executing SHARE pass (SAT-based resource sharing).
6.14. Executing OPT pass (performing simple optimizations).
6.14.1. Executing OPT_EXPR pass (perform const folding).
6.14.2. Executing OPT_MERGE pass (detect identical cells).
6.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
6.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
6.14.5. Executing OPT_MERGE pass (detect identical cells).
6.14.6. Executing OPT_DFF pass (perform DFF optimizations).
6.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
6.14.8. Executing OPT_EXPR pass (perform const folding).
6.14.9. Finished fast OPT passes. (There is nothing left to do.)
6.15. Executing MEMORY pass.
6.15.1. Executing OPT_MEM pass (optimize memories).
6.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
6.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
6.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).
6.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
6.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
6.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
6.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
6.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
6.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).
6.16. Executing OPT_CLEAN pass (remove unused cells and wires).
7. Executing SYNTH pass.
7.1. Executing OPT pass (performing simple optimizations).
7.1.1. Executing OPT_EXPR pass (perform const folding).
7.1.2. Executing OPT_MERGE pass (detect identical cells).
7.1.3. Executing OPT_DFF pass (perform DFF optimizations).
7.1.4. Executing OPT_CLEAN pass (remove unused cells and wires).
7.1.5. Finished fast OPT passes.
7.2. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
7.3. Executing OPT pass (performing simple optimizations).
7.3.1. Executing OPT_EXPR pass (perform const folding).
7.3.2. Executing OPT_MERGE pass (detect identical cells).
7.3.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
7.3.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
7.3.5. Executing OPT_MERGE pass (detect identical cells).
7.3.6. Executing OPT_SHARE pass.
7.3.7. Executing OPT_DFF pass (perform DFF optimizations).
7.3.8. Executing OPT_CLEAN pass (remove unused cells and wires).
7.3.9. Executing OPT_EXPR pass (perform const folding).
7.3.10. Finished fast OPT passes. (There is nothing left to do.)
7.4. Executing TECHMAP pass (map to technology primitives).
7.4.1. Executing Verilog-2005 frontend: /home/pvc/eda-env/envs/py312/bin/../share/yosys/techmap.v
7.4.2. Executing Verilog-2005 frontend: /home/pvc/openroad/Digital-PLL/openroad/OpenROAD-flow-scripts/flow/platforms/common/lcu_kogge_stone.v
7.4.3. Continuing TECHMAP pass.
7.5. Executing OPT pass (performing simple optimizations).
7.5.1. Executing OPT_EXPR pass (perform const folding).
7.5.2. Executing OPT_MERGE pass (detect identical cells).
7.5.3. Executing OPT_DFF pass (perform DFF optimizations).
7.5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
7.5.5. Finished fast OPT passes.
7.6. Executing ABC pass (technology mapping using ABC).
7.6.1. Extracting gate netlist of module `\digital_pll' to `<abc-temp-dir>/input.blif'..
7.7. Executing OPT pass (performing simple optimizations).
7.7.1. Executing OPT_EXPR pass (perform const folding).
7.7.2. Executing OPT_MERGE pass (detect identical cells).
7.7.3. Executing OPT_DFF pass (perform DFF optimizations).
7.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
7.7.5. Finished fast OPT passes.
7.8. Executing HIERARCHY pass (managing design hierarchy).
7.8.1. Analyzing design hierarchy..
7.8.2. Analyzing design hierarchy..
7.9. Printing statistics.
7.10. Executing CHECK pass (checking for obvious problems).
8. Executing OPT pass (performing simple optimizations).
8.1. Executing OPT_EXPR pass (perform const folding).
8.2. Executing OPT_MERGE pass (detect identical cells).
8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
8.5. Executing OPT_MERGE pass (detect identical cells).
8.6. Executing OPT_DFF pass (perform DFF optimizations).
8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
8.8. Executing OPT_EXPR pass (perform const folding).
8.9. Finished fast OPT passes. (There is nothing left to do.)
9. Executing EXTRACT_FA pass (find and extract full/half adders).
10. Executing TECHMAP pass (map to technology primitives).
10.1. Executing Verilog-2005 frontend: /home/pvc/openroad/Digital-PLL/openroad/OpenROAD-flow-scripts/flow/platforms/gf180/cells_adders.v
10.2. Continuing TECHMAP pass.
11. Executing TECHMAP pass (map to technology primitives).
11.1. Executing Verilog-2005 frontend: /home/pvc/eda-env/envs/py312/bin/../share/yosys/techmap.v
11.2. Continuing TECHMAP pass.
12. Executing OPT pass (performing simple optimizations).
12.1. Executing OPT_EXPR pass (perform const folding).
12.2. Executing OPT_MERGE pass (detect identical cells).
12.3. Executing OPT_DFF pass (perform DFF optimizations).
12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
12.5. Finished fast OPT passes.
13. Executing TECHMAP pass (map to technology primitives).
13.1. Executing Verilog-2005 frontend: /home/pvc/openroad/Digital-PLL/openroad/OpenROAD-flow-scripts/flow/platforms/gf180/cells_latch.v
13.2. Continuing TECHMAP pass.
14. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
14.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
15. Executing OPT pass (performing simple optimizations).
15.1. Executing OPT_EXPR pass (perform const folding).
15.2. Executing OPT_MERGE pass (detect identical cells).
15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
15.5. Executing OPT_MERGE pass (detect identical cells).
15.6. Executing OPT_DFF pass (perform DFF optimizations).
15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
15.8. Executing OPT_EXPR pass (perform const folding).
15.9. Finished fast OPT passes. (There is nothing left to do.)
16. Executing SETUNDEF pass (replace undef values with defined constants).
abc -script /home/pvc/openroad/Digital-PLL/openroad/OpenROAD-flow-scripts/flow/scripts/abc_area.script -liberty ./objects/gf180/pll/base/lib/gf180mcu_fd_sc_mcu7t5v0__ff_n40C_3v60.lib -constr ./objects/gf180/pll/base/abc.constr -dont_use *_1 -D 100
17. Executing ABC pass (technology mapping using ABC).
17.1. Extracting gate netlist of module `\digital_pll' to `<abc-temp-dir>/input.blif'..
18. Executing SPLITNETS pass (splitting up multi-bit signals).
19. Executing OPT_CLEAN pass (remove unused cells and wires).
20. Executing HILOMAP pass (mapping to constant drivers).
21. Executing INSBUF pass (insert buffer cells for connected wires).
22. Executing CHECK pass (checking for obvious problems).
23. Printing statistics.
24. Executing Verilog backend.
24.1. Executing BMUXMAP pass.
24.2. Executing DEMUXMAP pass.
exec cp /home/pvc/openroad/Digital-PLL/openroad/digital_pll/constraint.sdc ./results/gf180/pll/base/1_synth.sdc
Warnings: 8 unique messages, 8 total
End of script. Logfile hash: 2173f247da, CPU: user 0.36s system 0.06s, MEM: 70.09 MB peak
Yosys 0.57+72 (git sha1 fa02d71f6, x86_64-conda-linux-gnu-c++ 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/home/runner/work/conda-opensource-eda/conda-opensource-eda/workdir/conda-env/conda-bld/yosys_1757723646908/work=/usr/local/src/conda/yosys-0.57_73_gfa02d71f6 -fdebug-prefix-map=/home/pvc/eda-env/envs/py312=/usr/local/src/conda-prefix -fPIC -O3)
Time spent: 23% 1x dfflibmap (0 sec), 21% 2x stat (0 sec), ...
Elapsed time: 0:00.45[h:]min:sec. CPU time: user 0.41 sys 0.07 (108%). Peak memory: 73436KB.
